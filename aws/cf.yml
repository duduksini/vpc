AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with subnets as a base for other resources'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.0.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.0.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetPublicB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.0.16.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  RouteTablePublicA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTablePublicB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublicA
  RouteTableAssociationPublicB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublicB
  RoutePublicA:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicA
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RoutePublicB:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicB
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicA
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationPublicB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicB
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryPublicAllowAllIn:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryPublicAllowAllOut:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  DefaultSecurityGroup:
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DefaultSecurityGroup'
  SubnetPublicA:
    Value: !Ref SubnetPublicA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicA'
  SubnetPublicB:
    Value: !Ref SubnetPublicB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicB'
  RouteTablePublicA:
    Value: !Ref RouteTablePublicA
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublicA'
  RouteTablePublicB:
    Value: !Ref RouteTablePublicB
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublicB'
